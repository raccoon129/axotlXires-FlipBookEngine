<!DOCTYPE html>
<html>
<head>
    <title>Lector PDF - Axotl Xires FlipBook Engine</title>
    <link rel="stylesheet" href="/css/flipbook.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/blasten/turn.js/turn.min.js"></script>
    
    <!-- Agregar este script para verificar la carga -->
    <script>
        window.addEventListener('load', function() {
            if (typeof $.fn.turn === 'undefined') {
                console.error('turn.js no se cargó correctamente');
                // Intentar cargar turn.js de forma alternativa
                var script = document.createElement('script');
                script.src = 'https://raw.githack.com/blasten/turn.js/master/turn.min.js';
                script.onload = function() {
                    console.log('turn.js cargado exitosamente desde fuente alternativa');
                    if (typeof renderPDF === 'function') {
                        renderPDF();
                    }
                };
                document.head.appendChild(script);
            } else {
                console.log('turn.js cargado correctamente');
            }
        });
    </script>
</head>
<body>
    <div class="flipbook-container">
        <div id="loader" class="loader">
            <div class="loader-spinner"></div>
            <p>Cargando PDF...</p>
        </div>
        
        <div id="flipbook"></div>
        
        <div id="controls">
            <div class="control-bar">
                <button class="control-button" id="first">
                    <i class="fas fa-step-backward"></i>
                </button>
                <button class="control-button" id="prev">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <span class="page-number">
                    Página <span id="currentPage">1</span> de <span id="totalPages">0</span>
                </span>
                <button class="control-button" id="next">
                    <i class="fas fa-chevron-right"></i>
                </button>
                <button class="control-button" id="last">
                    <i class="fas fa-step-forward"></i>
                </button>
            </div>
        </div>
    </div>

    <script>
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js';

        const pdfUrl = '<%= pdfUrl %>';
        let currentScale = 1.0;
        const desiredWidth = 600; // Reducido de 800 a 600 para mejor visualización inicial

        function calculateDimensions() {
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;
            const controlsHeight = isMobile() ? 80 : 100;
            const padding = isMobile() ? 20 : 40;
            
            // Ajustar dimensiones según dispositivo
            let width;
            if (isMobile()) {
                width = windowWidth - padding; // Una sola página en móvil
            } else {
                width = Math.min(windowWidth - padding, desiredWidth * 2); // Doble página en desktop/tablet
            }
            
            // Calcular altura manteniendo proporción
            let height = Math.min(
                windowHeight - controlsHeight - padding,
                isMobile() ? width * 1.4 : width * 0.7
            );
            
            return { 
                width: Math.floor(width),
                height: Math.floor(height)
            };
        }

        function isMobile() {
            return window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        }

        async function renderPDF() {
            try {
                const loadingTask = pdfjsLib.getDocument(pdfUrl);
                const pdf = await loadingTask.promise;
                
                const flipbook = document.getElementById('flipbook');
                flipbook.innerHTML = '';
                
                // Renderizar páginas (sin portada ni contraportada)
                for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
                    const page = await pdf.getPage(pageNum);
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    
                    const viewport = page.getViewport({ scale: 1.0 });
                    const scale = desiredWidth / viewport.width;
                    const scaledViewport = page.getViewport({ scale });
                    
                    canvas.height = scaledViewport.height;
                    canvas.width = scaledViewport.width;
                    
                    await page.render({
                        canvasContext: context,
                        viewport: scaledViewport
                    }).promise;
                    
                    const div = document.createElement('div');
                    div.className = 'page';
                    div.appendChild(canvas);
                    flipbook.appendChild(div);
                }

                // Actualizar total de páginas
                document.getElementById('totalPages').textContent = pdf.numPages;
                
                // Inicializar turn.js con configuración responsiva
                const dimensions = calculateDimensions();
                $(flipbook).turn({
                    width: dimensions.width,
                    height: dimensions.height,
                    autoCenter: true,
                    acceleration: false, // Desactivar aceleración para movimientos más suaves
                    gradients: !isMobile(),
                    elevation: 50,
                    pages: pdf.numPages,
                    display: isMobile() ? 'single' : 'double',
                    duration: isMobile() ? 400 : 600,
                    when: {
                        turning: function(event, page, view) {
                            document.getElementById('currentPage').textContent = page;
                            // Prevenir cambios de página mientras se está animando
                            if ($(this).turn('animating')) {
                                event.preventDefault();
                            }
                        },
                        turned: function(event, page) {
                            // Actualizar controles después de la animación
                            updateControls(page, pdf.numPages);
                        }
                    }
                });

                // Función para actualizar estados de los controles
                function updateControls(currentPage, totalPages) {
                    document.getElementById('first').disabled = currentPage === 1;
                    document.getElementById('prev').disabled = currentPage === 1;
                    document.getElementById('next').disabled = currentPage === totalPages;
                    document.getElementById('last').disabled = currentPage === totalPages;
                }

                // Manejar cambios de tamaño con debounce
                let resizeTimer;
                window.addEventListener('resize', function() {
                    clearTimeout(resizeTimer);
                    resizeTimer = setTimeout(function() {
                        const dimensions = calculateDimensions();
                        const currentPage = $(flipbook).turn('page');
                        
                        $(flipbook).turn('size', 
                            dimensions.width,
                            dimensions.height
                        );
                        
                        $(flipbook).turn('display', window.innerWidth < 768 ? 'single' : 'double');
                        $(flipbook).turn('page', currentPage);
                    }, 250);
                });

                // Detectar si es dispositivo móvil
                function isMobile() {
                    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                }

                // Ocultar loader
                document.getElementById('loader').style.display = 'none';
                
                // Configurar controles
                document.getElementById('first').addEventListener('click', () => {
                    $(flipbook).turn('page', 1);
                });
                
                document.getElementById('last').addEventListener('click', () => {
                    $(flipbook).turn('page', pdf.numPages);
                });
                
                document.getElementById('prev').addEventListener('click', () => {
                    $(flipbook).turn('previous');
                });
                
                document.getElementById('next').addEventListener('click', () => {
                    $(flipbook).turn('next');
                });

                // Agregar manejo de eventos táctiles para móvil
                if (isMobile()) {
                    let touchStartX = 0;
                    let touchStartTime = 0;
                    
                    flipbook.addEventListener('touchstart', function(e) {
                        touchStartX = e.touches[0].clientX;
                        touchStartTime = Date.now();
                    }, { passive: true });
                    
                    flipbook.addEventListener('touchend', function(e) {
                        const touchEndX = e.changedTouches[0].clientX;
                        const swipeDistance = touchEndX - touchStartX;
                        const swipeTime = Date.now() - touchStartTime;
                        
                        if (swipeTime < 300 && Math.abs(swipeDistance) > 50) {
                            if (swipeDistance > 0) {
                                $(flipbook).turn('previous');
                            } else {
                                $(flipbook).turn('next');
                            }
                        }
                    }, { passive: true });
                }

            } catch (error) {
                console.error('Error al renderizar el PDF:', error);
                alert('Error al cargar el PDF. Por favor, intente de nuevo.');
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Verificar dependencias
            const dependencies = {
                'jQuery': typeof $ !== 'undefined',
                'turn.js': typeof $.fn.turn !== 'undefined',
                'pdf.js': typeof pdfjsLib !== 'undefined'
            };
            
            console.log('Estado de dependencias:', dependencies);
            
            // Verificar si falta alguna dependencia
            const missingDeps = Object.entries(dependencies)
                .filter(([, loaded]) => !loaded)
                .map(([name]) => name);
            
            if (missingDeps.length > 0) {
                console.error('Dependencias faltantes:', missingDeps);
                alert(`Error: Faltan las siguientes dependencias: ${missingDeps.join(', ')}`);
                return;
            }

            renderPDF();

            // Agregar después de cargar todas las dependencias
            console.log('jQuery version:', $.fn.jquery);
            console.log('turn.js loaded:', typeof $.fn.turn !== 'undefined');
            console.log('pdf.js version:', pdfjsLib.version);
        });
    </script>
</body>
</html>